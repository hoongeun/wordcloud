kind: Deployment
apiVersion: apps/v1
metadata:
  name: {{ template "krwordcloud.fullname" . }}-api-deployment
  labels: {{- include "krwordcloud.api.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels: {{- include "krwordcloud.api.matchLabels" . | nindent 6 }}
  {{- if .Values.api.updateStrategy }}
  strategy: {{ toYaml .Values.api.updateStrategy | nindent 4 }}
  {{- end }}
  replicas: {{ .Values.api.replicaCount }}
  template:
    metadata:
      labels:
        {{- include "krwordcloud.api.matchLabels" . | nindent 8 }}
    spec:
      {{- if .Values.api.schedulerName }}
      schedulerName: {{ .Values.api.schedulerName | quote }}
      {{- end }}
      hostAliases:
        - ip: "127.0.0.1"
          hostnames:
            - "status.localhost"
      {{- if .Values.api.affinity }}
      affinity: {{- include "krwordcloud.tplValue" (dict "value" .Values.api.affinity "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.api.nodeSelector }}
      nodeSelector: {{- include "krwordcloud.tplValue" (dict "value" .Values.api.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.api.tolerations }}
      tolerations: {{- include "krwordcloud.tplValue" (dict "value" .Values.api.tolerations "context" $) | nindent 8 }}
      {{- end }}
      containers:
        - name: api-krwordcloud
          image: "{{ .Values.api.image.name }}:{{ .Values.api.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.api.image.pullPolicy | quote }}
          env:
            - name: COUCHBASE_HOST
              value: {{ include "subchart" (list . "couchbase-operator" "couchbase-operator.fullname") | quote }}
            - name: COUCHBASE_BUCKET
              value: {{ ".Values.couchbase-operator.bucket" | quote }}
            - name: BUCKET_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "krwordcloud.fullname" . }}-api-secret
                  key: bucket-password
          ports:
            - name: http
              containerPort: 4000
            - name: https
              containerPort: 4001
          {{- if .Values.api.livenessProbe.enabled }}
          livenessProbe:
            initialDelaySeconds: {{ .Values.api.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.api.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.api.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.api.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.api.livenessProbe.failureThreshold }}
            httpGet:
              path: /trend
              port: {{ ternary "https" "http" .Values.api.healthcheckHttps }}
              {{- if .Values.api.healthcheckHttps }}
              scheme: HTTPS
              {{- end }}
              {{- if .Values.api.livenessProbeHeaders }}
              httpHeaders: {{- toYaml .Values.api.livenessProbeHeaders | nindent 16 }}
              {{- end }}
          {{- end }}
          {{- if .Values.api.readinessProbe.enabled }}
          readinessProbe:
            initialDelaySeconds: {{ .Values.api.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.api.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.api.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.api.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.api.readinessProbe.failureThreshold }}
            httpGet:
              path: /trend
              port: {{ ternary "https" "http" .Values.api.healthcheckHttps }}
              {{- if .Values.api.healthcheckHttps }}
              scheme: HTTPS
              {{- end }}
              {{- if .Values.api.readinessProbeHeaders }}
              httpHeaders: {{- toYaml .Values.api.readinessProbeHeaders | nindent 16 }}
              {{- end }}
          {{- end }}
          {{- if .Values.api.resources }}
          resources: {{- toYaml .Values.api.resources | nindent 12 }}
          {{- end }}
  
